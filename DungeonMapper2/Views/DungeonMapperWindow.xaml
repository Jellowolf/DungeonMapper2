<Window x:Class="DungeonMapper2.Views.DungeonMapperWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DungeonMapper2"
        xmlns:utilities="clr-namespace:DungeonMapper2.Utilities"
        xmlns:models="clr-namespace:DungeonMapper2.Models"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        Title="Dungeon Mapper 2" Height="750" Width="1000"
        Background="DarkGray" Icon="../Resources/DungeonMapper2Icon.ico">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding HandleWidowClosingCommand}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="KeyDown">
            <i:InvokeCommandAction Command="{Binding WindowKeyDownCommand}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <utilities:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <utilities:BooleanToVisibilityConverter Reverse="True" x:Key="InverseBooleanToVisibilityConverter"/>
        <utilities:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>

        <Style x:Key="PathItemStyle" TargetType="TreeViewItem">
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
        </Style>
        <Style x:Key="SegoeIcon" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
        </Style>
        <Style x:Key="MainToolBarIcon" TargetType="TextBlock" BasedOn="{StaticResource SegoeIcon}">
            <Setter Property="FontSize" Value="16"/>
        </Style>
        <Style x:Key="TreeToolBarIcon" TargetType="TextBlock" BasedOn="{StaticResource SegoeIcon}">
            <Setter Property="FontSize" Value="12"/>
        </Style>
        <Style x:Key="ContextMenuIcon" TargetType="TextBlock" BasedOn="{StaticResource SegoeIcon}">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        
        <HierarchicalDataTemplate x:Key="PathItemTemplate" ItemsSource="{Binding ChildItems}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Icon, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=SegoeIcon}" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding Name}" Visibility="{Binding EditModeEnabled, Converter={StaticResource InverseBooleanToVisibilityConverter}}" Margin="3,0,3,0"/>
                <TextBox x:Name="mapNameTextBox" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                         Visibility="{Binding EditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}" Padding="1,0,1,0">
                    <i:Interaction.Triggers>
                        <i:DataTrigger Binding="{Binding ElementName=mapNameTextBox, Path=Visibility}" Comparison="Equal" Value="Visible">
                            <utilities:SetFocusAction TargetObject="{Binding ElementName=mapNameTextBox}"/>
                            <i:CallMethodAction MethodName="SelectAll" TargetObject="{Binding ElementName=mapNameTextBox}"/>
                        </i:DataTrigger>
                        <i:EventTrigger EventName="LostFocus">
                            <i:InvokeCommandAction Command="{Binding DataContext.CompleteEditPathItemCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                                   CommandParameter="{Binding EditModeEnabled}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding DataContext.CompleteEditPathItemCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    CommandParameter="{Binding EditModeEnabled}"/>
                    </TextBox.InputBindings>
                </TextBox>
            </StackPanel>
        </HierarchicalDataTemplate>
    </Window.Resources>
    <Grid x:Name="mainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="150"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Menu Grid.Row="0" Grid.ColumnSpan="3">
            <MenuItem Header="_File">
                <MenuItem Header="_Exit" Command="{Binding CloseWindowCommand}"/>
            </MenuItem>
            <MenuItem Header="_Tools">
                <MenuItem Header="_Settings..." Command="{Binding OpenSettingsCommand}"/>
            </MenuItem>
        </Menu>

        <ToolBarTray Grid.Row="1" Grid.ColumnSpan="3" IsLocked="True" Background="DarkGray">
            <ToolBar Background="DarkGray" Loaded="SetToolBarTemplateBackground">
                <Button Command="{Binding SaveCurrentMapCommand}" Focusable="False">
                    <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Save}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=MainToolBarIcon}"/>
                </Button>
                <Button Command="{Binding ClearCurrentMapCommand}" Focusable="False">
                    <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.EraseTool}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=MainToolBarIcon}"/>
                </Button>
                <Button Command="{Binding DeleteCurrentMapCommand}" Focusable="False">
                    <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Delete}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=MainToolBarIcon}"/>
                </Button>
            </ToolBar>
        </ToolBarTray>

        <TextBlock Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto" Text="{Binding CurrentMap.Name}" FontSize="20" Margin="0,0,0,5"/>

        <DockPanel Grid.Column="1" Grid.Row="3">
            <ToolBarTray DockPanel.Dock="Top" IsLocked="True" Background="DarkGray">
                <ToolBar Background="DarkGray" Loaded="SetToolBarTemplateBackground">
                    <!-- The functionality here still needs work-->
                    <Button Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Map}" Focusable="False">
                        <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Add}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=TreeToolBarIcon}"/>
                    </Button>
                    <Button Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Folder}" Focusable="False">
                        <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.NewFolder}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=TreeToolBarIcon}"/>
                    </Button>
                </ToolBar>
            </ToolBarTray>
            <TreeView DockPanel.Dock="Bottom" x:Name="treeView" Background="DarkGray" Focusable="False" ItemTemplate="{StaticResource PathItemTemplate}"
                      ItemContainerStyle="{StaticResource PathItemStyle}" AllowDrop="True" ItemsSource="{Binding TreeData, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <TreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Add" IsEnabled="{Binding AddEnabled}">
                            <MenuItem.Icon>
                                <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Add}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=ContextMenuIcon}"/>
                            </MenuItem.Icon>
                            <MenuItem Header="Folder" Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Folder}">
                                <MenuItem.Icon>
                                    <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.TreeFolderFolder}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=ContextMenuIcon}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Map" Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Map}">
                                <MenuItem.Icon>
                                    <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Add}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=ContextMenuIcon}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </MenuItem>
                        <MenuItem Header="Rename" Command="{Binding StartRenamePathItemCommand}">
                            <MenuItem.Icon>
                                <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Rename}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=ContextMenuIcon}"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Delete" Command="{Binding DeletePathItemCommand}">
                            <MenuItem.Icon>
                                <TextBlock Text="{Binding Source={x:Static models:SegoeIcon.Delete}, Converter={StaticResource EnumDescriptionConverter}}" Style="{StaticResource ResourceKey=ContextMenuIcon}"/>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </TreeView.ContextMenu>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedItemChanged">
                        <i:InvokeCommandAction Command="{Binding HandleTreeSelectionChangedCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding HandleTreeLeftMouseDownCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding HandleTreeRightMouseDownCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding HandleTreeMouseMoveCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Drop">
                        <i:InvokeCommandAction Command="{Binding HandleTreeDropCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TreeView>
        </DockPanel>

        <Border Grid.Row="3" Grid.Column="2" Height="30" Width="10" CornerRadius="0,8,8,0" BorderThickness="1" BorderBrush="DimGray" Background="DimGray"
                HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,5,0,0" Panel.ZIndex="1" MouseUp="Border_MouseUp"/>
        <GridSplitter x:Name="gridSplitter" Grid.Row="3" Grid.Column="1" Width="5" Height="auto" Focusable="False"/>

        <DockPanel Grid.Row="3" Grid.Column="2">
            <ScrollViewer DockPanel.Dock="Bottom" x:Name="scrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" 
                          Background="Black" FocusManager.FocusedElement="{Binding ElementName=canvas}">
                <Canvas x:Name="canvas" ScrollViewer.CanContentScroll="True" Margin="50" Focusable="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyDown">
                            <i:InvokeCommandAction Command="{Binding MapKeyDownCommand}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Canvas>
            </ScrollViewer>
        </DockPanel>
    </Grid>
</Window>
