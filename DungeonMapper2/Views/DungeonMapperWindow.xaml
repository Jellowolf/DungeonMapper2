<Window x:Class="DungeonMapper2.Views.DungeonMapperWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DungeonMapper2"
        xmlns:utilities="clr-namespace:DungeonMapper2.Utilities"
        xmlns:models="clr-namespace:DungeonMapper2.Models"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        Title="Dungeon Mapper 2" Height="750" Width="1000"
        Background="DarkGray">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding HandleWidowClosingCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <utilities:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <utilities:BooleanToVisibilityConverter Reverse="True" x:Key="InverseBooleanToVisibilityConverter"/>
        <HierarchicalDataTemplate x:Key="PathItemTemplate" ItemsSource="{Binding ChildItems}">
            <StackPanel>
                <TextBlock Text="{Binding Path=Name}" Visibility="{Binding EditModeEnabled, Converter={StaticResource InverseBooleanToVisibilityConverter}}" Margin="3,0,3,0"/>
                <TextBox x:Name="mapNameTextBox" Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                         Visibility="{Binding EditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}}" Padding="1,0,1,0">
                    <i:Interaction.Triggers>
                        <i:DataTrigger Binding="{Binding ElementName=mapNameTextBox, Path=Visibility}" Comparison="Equal" Value="Visible">
                            <utilities:SetFocusAction TargetObject="{Binding ElementName=mapNameTextBox}"/>
                            <i:CallMethodAction MethodName="SelectAll" TargetObject="{Binding ElementName=mapNameTextBox}"/>
                        </i:DataTrigger>
                        <i:EventTrigger EventName="LostFocus">
                            <i:InvokeCommandAction Command="{Binding DataContext.CompleteEditPathItemCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                                   CommandParameter="{Binding EditModeEnabled}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding DataContext.CompleteEditPathItemCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    CommandParameter="{Binding EditModeEnabled}"/>
                    </TextBox.InputBindings>
                </TextBox>
            </StackPanel>
        </HierarchicalDataTemplate>
        <Style x:Key="PathItemStyle" TargetType="TreeViewItem">
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>
        </Style>
    </Window.Resources>
    <Grid x:Name="mainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="150"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3">
            <Button Focusable="False" x:Name="clearButton" Content="Clear" HorizontalAlignment="Left" Margin="115,10,0,0" VerticalAlignment="Top" Command="{Binding ClearCurrentMapCommand}"/>
            <Button Focusable="False" x:Name="deleteButton" Content="Delete" HorizontalAlignment="Left" Margin="163,10,0,0" VerticalAlignment="Top" Command="{Binding DeleteCurrentMapCommand}"/>
            <CheckBox x:Name="autoSavecheckBox" Content="auto-save" HorizontalAlignment="Left" Margin="273,10,0,0" VerticalAlignment="Top" IsChecked="{Binding AutoSaveEnabled}"/>
            <Button Focusable="False" x:Name="saveButton" Content="Save" HorizontalAlignment="Left" Margin="68,10,0,0" VerticalAlignment="Top" Command="{Binding SaveCurrentMapCommand}"/>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto" Text="{Binding CurrentMap.Name}" FontSize="20"/>
        </Grid>

        <DockPanel Grid.Column="1" Grid.Row="1">
            <TextBox DockPanel.Dock="Top" Text="FolderNameHere" Visibility="Collapsed"/>
            <TreeView DockPanel.Dock="Bottom" x:Name="treeView" Background="DarkGray" Focusable="False" ItemTemplate="{StaticResource PathItemTemplate}"
                      ItemContainerStyle="{StaticResource PathItemStyle}" AllowDrop="True" ItemsSource="{Binding TreeData, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <TreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Add" IsEnabled="{Binding AddEnabled}">
                            <MenuItem Header="Folder" Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Folder}"/>
                            <MenuItem Header="Map" Command="{Binding StartAddPathItemCommand}" CommandParameter="{x:Static models:PathItemType.Map}"/>
                        </MenuItem>
                        <MenuItem Header="Rename" Command="{Binding StartRenamePathItemCommand}"/>
                        <MenuItem Header="Delete" Command="{Binding DeletePathItemCommand}"/>
                    </ContextMenu>
                </TreeView.ContextMenu>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedItemChanged">
                        <i:InvokeCommandAction Command="{Binding HandleTreeSelectionChangedCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding HandleTreeLeftMouseDownCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseRightButtonDown">
                        <i:InvokeCommandAction Command="{Binding HandleTreeRightMouseDownCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseMove">
                        <i:InvokeCommandAction Command="{Binding HandleTreeMouseMoveCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Drop">
                        <i:InvokeCommandAction Command="{Binding HandleTreeDropCommand}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TreeView>
        </DockPanel>

        <Border Grid.Row="1" Grid.Column="2" Height="30" Width="10" CornerRadius="0,8,8,0" BorderThickness="1" BorderBrush="DimGray" Background="DimGray"
                HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,5,0,0" Panel.ZIndex="1" MouseUp="Border_MouseUp"/>
        <GridSplitter x:Name="gridSplitter" Grid.Row="1" Grid.Column="1" Width="5" Height="auto" Focusable="False"/>

        <DockPanel Grid.Row="1" Grid.Column="2">
            <ScrollViewer DockPanel.Dock="Bottom" x:Name="scrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" 
                          Background="Black" FocusManager.FocusedElement="{Binding ElementName=canvas}">
                <Canvas x:Name="canvas" ScrollViewer.CanContentScroll="True" Margin="50" Focusable="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="KeyDown">
                            <i:InvokeCommandAction Command="{Binding MapKeyDownCommand}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Canvas>
            </ScrollViewer>
        </DockPanel>
    </Grid>
</Window>
